//*****************************************************************************
// (C) 2014, Stefan Korner, Austria                                           *
//                                                                            *
// The Space C++ Library is free software; you can redistribute it and/or     *
// modify it under the terms of the GNU Lesser General Public License as      *
// published by the Free Software Foundation; either version 2.1 of the       *
// License, or (at your option) any later version.                            *
//                                                                            *
// The Space C++ Library is distributed in the hope that it will be useful,   *
// but WITHOUT ANY WARRANTY; without even the implied warranty of             *
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser    *
// General Public License for more details.                                   *
//*****************************************************************************
// Utilities - CRC - Unit Tests                                               *
//*****************************************************************************
#include "UTIL_CRC.hpp"

#include <stdio.h>

/////////////////////////////
// test patterns for CRC 8 //
/////////////////////////////
const uint8_t SPW_RMAP_HEADER1[] =
{
  0xFE, 0x01, 0x6C, 0x00, 0x67, 0x00, 0x00, 0x00,
  0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10
};
const uint8_t SPW_RMAP_HEADER1_CRC = 0x9F;

const uint8_t SPW_RMAP_DATA1[] =
{
  0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17
};
const uint8_t SPW_RMAP_DATA1_CRC = 0x56;

const uint8_t SPW_RMAP_HEADER2[] =
{
  0x67, 0x01, 0x2C, 0x00, 0xFE, 0x00, 0x00
};
const uint8_t SPW_RMAP_HEADER2_CRC = 0xED;

//////////////////////////////
// test patterns for CRC 16 //
//////////////////////////////
const uint8_t TC_PACKET_01[] =
{
  0x1A, 0x8C, 0xC0, 0x0E, 0x01, 0x0D, 0x19, 0x06,
  0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x01, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x02, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x03, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x04, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x05, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x06, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x07, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x08, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x09, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x0A, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x0B, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x0C, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x0D, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x0E, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x0F, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x10, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x11, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x12, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x13, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x14, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x15, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x16, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x17, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x18, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x19, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x1A, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x1B, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x1C, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x1D, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x1E, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0x00, 0x1F, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x0F, 0xAC, 0x8F
};

const uint8_t TC_FRAME_01[] =
{
  0x22, 0xF6, 0x00, 0xFF, 0x00, 0x42, 0x1A, 0x8C,
  0xC0, 0x0E, 0x01, 0x0D, 0x19, 0x06, 0x02, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x02, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x03, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x04, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x05, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x06, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x07, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x08, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x09, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x0A, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x0B, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x0C, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x0D, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x0E, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x0F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x10, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x11, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x12, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x13, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x14, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x15, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x16, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x17, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x18, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x19, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x1A, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x1B, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x1C, 0xFF, 0x00, 0x00, 0x00, 0xAD, 0x1A
};

const uint8_t TC_FRAME_02[] =
{
  0x22, 0xF6, 0x00, 0x23, 0x00, 0x82, 0x00, 0x0F,
  0x00, 0x1D, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x1E, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x1F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0xAC, 0x8F, 0x00, 0x68
};

//-----------------------------------------------------------------------------
bool test_CRC8operation()
//-----------------------------------------------------------------------------
{
  uint8_t crc;
  uint8_t expectedCrc;
  crc = UTIL::CRC::calculate8(SPW_RMAP_HEADER1, sizeof(SPW_RMAP_HEADER1));
  expectedCrc = SPW_RMAP_HEADER1_CRC;
  if(crc != expectedCrc)
  {
    printf("CRC %02X does not match the expected one: %02X\n", crc, expectedCrc);
    return false;
  }
  printf( "CRC = %02X  ---> OK\n", crc);
  crc = UTIL::CRC::calculate8(SPW_RMAP_DATA1, sizeof(SPW_RMAP_DATA1));
  expectedCrc = SPW_RMAP_DATA1_CRC;
  if(crc != expectedCrc)
  {
    printf("CRC %02X does not match the expected one: %02X\n", crc, expectedCrc);
    return false;
  }
  printf( "CRC = %02X  ---> OK\n", crc);
  crc = UTIL::CRC::calculate8(SPW_RMAP_HEADER2, sizeof(SPW_RMAP_HEADER2));
  expectedCrc = SPW_RMAP_HEADER2_CRC;
  if(crc != expectedCrc)
  {
    printf("CRC %02X does not match the expected one: %02X\n", crc, expectedCrc);
    return false;
  }
  printf( "CRC = %02X  ---> OK\n", crc);
  return true;
}

//-----------------------------------------------------------------------------
bool test_CRC16operation()
//-----------------------------------------------------------------------------
{
  const uint8_t* pkt;
  size_t pktSize;
  uint16_t crc;
  uint16_t expectedCrc;
  pkt = TC_PACKET_01;
  pktSize = sizeof(TC_PACKET_01);
  crc = UTIL::CRC::calculate16(pkt, pktSize - 2);
  expectedCrc = (0x100 * pkt[pktSize - 2]) + pkt[pktSize - 1];
  if(crc != expectedCrc)
  {
    printf("CRC %04X does not match the expected one: %04X\n", crc, expectedCrc);
    return false;
  }
  printf( "CRC = %04X  ---> OK\n", crc);
  pkt = TC_FRAME_01;
  pktSize = sizeof(TC_FRAME_01);
  crc = UTIL::CRC::calculate16(pkt, pktSize - 2);
  expectedCrc = (0x100 * pkt[pktSize - 2]) + pkt[pktSize - 1];
  if(crc != expectedCrc)
  {
    printf("CRC %04X does not match the expected one: %04X\n", crc, expectedCrc);
    return false;
  }
  printf( "CRC = %04X  ---> OK\n", crc);
  pkt = TC_FRAME_02;
  pktSize = sizeof(TC_FRAME_02);
  crc = UTIL::CRC::calculate16(pkt, pktSize - 2);
  expectedCrc = (0x100 * pkt[pktSize - 2]) + pkt[pktSize - 1];
  if(crc != expectedCrc)
  {
    printf("CRC %04X does not match the expected one: %04X\n", crc, expectedCrc);
    return false;
  }
  printf( "CRC = %04X  ---> OK\n", crc);
  return true;
}

//-----------------------------------------------------------------------------
int main()
//-----------------------------------------------------------------------------
{
  printf("***** test_CRC8operation() start\n");
  bool retVal = test_CRC8operation();
  printf("***** test_CRC8operation() done: %d\n", retVal);
  if(retVal == false)
  {
    return -1;
  }
  printf("***** test_CRC16operation() start\n");
  retVal = test_CRC16operation();
  printf("***** test_CRC16operation() done: %d\n", retVal);
  if(retVal == false)
  {
    return -1;
  }
  return 0;
}
