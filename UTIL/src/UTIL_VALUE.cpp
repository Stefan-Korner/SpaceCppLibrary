//*****************************************************************************
// (C) 2015, Stefan Korner, Austria                                           *
//                                                                            *
// The Space C++ Library is free software; you can redistribute it and/or     *
// modify it under the terms of the GNU Lesser General Public License as      *
// published by the Free Software Foundation; either version 2.1 of the       *
// License, or (at your option) any later version.                            *
//                                                                            *
// The Space C++ Library is distributed in the hope that it will be useful,   *
// but WITHOUT ANY WARRANTY; without even the implied warranty of             *
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser    *
// General Public License for more details.                                   *
//*****************************************************************************
// Utilities - Generic Value                                                  *
//*****************************************************************************
#include "UTIL_VALUE.hpp"

#include <iostream>
#include <stdio.h>
#include <string.h>

using namespace std;

//-----------------------------------------------------------------------------
UTIL::Value::Value(): m_valueType(UTIL::NO_VALUE), m_number(0), m_buffer(NULL)
//-----------------------------------------------------------------------------
{}

//-----------------------------------------------------------------------------
UTIL::Value::Value(const UTIL::Value& p_value):
  m_valueType(UTIL::NO_VALUE), m_number(0), m_buffer(NULL)
//-----------------------------------------------------------------------------
{
  operator=(p_value);
}

//-----------------------------------------------------------------------------
UTIL::Value::Value(UTIL::ValueType p_valueType):
  m_valueType(p_valueType), m_number(0), m_buffer(NULL)
//-----------------------------------------------------------------------------
{}

//-----------------------------------------------------------------------------
UTIL::Value::Value(bool p_value):
  m_valueType(UTIL::NO_VALUE), m_number(0), m_buffer(NULL)
//-----------------------------------------------------------------------------
{
  set(p_value);
}

//-----------------------------------------------------------------------------
UTIL::Value::Value(int8_t p_value):
  m_valueType(UTIL::NO_VALUE), m_number(0), m_buffer(NULL)
//-----------------------------------------------------------------------------
{
  set(p_value);
}

//-----------------------------------------------------------------------------
UTIL::Value::Value(int16_t p_value):
  m_valueType(UTIL::NO_VALUE), m_number(0), m_buffer(NULL)
//-----------------------------------------------------------------------------
{
  set(p_value);
}

//-----------------------------------------------------------------------------
UTIL::Value::Value(int32_t p_value):
  m_valueType(UTIL::NO_VALUE), m_number(0), m_buffer(NULL)
//-----------------------------------------------------------------------------
{
  set(p_value);
}

//-----------------------------------------------------------------------------
UTIL::Value::Value(int64_t p_value):
  m_valueType(UTIL::NO_VALUE), m_number(0), m_buffer(NULL)
//-----------------------------------------------------------------------------
{
  set(p_value);
}

//-----------------------------------------------------------------------------
UTIL::Value::Value(uint8_t p_value):
  m_valueType(UTIL::NO_VALUE), m_number(0), m_buffer(NULL)
//-----------------------------------------------------------------------------
{
  set(p_value);
}

//-----------------------------------------------------------------------------
UTIL::Value::Value(uint16_t p_value):
  m_valueType(UTIL::NO_VALUE), m_number(0), m_buffer(NULL)
//-----------------------------------------------------------------------------
{
  set(p_value);
}

//-----------------------------------------------------------------------------
UTIL::Value::Value(uint32_t p_value):
  m_valueType(UTIL::NO_VALUE), m_number(0), m_buffer(NULL)
//-----------------------------------------------------------------------------
{
  set(p_value);
}

//-----------------------------------------------------------------------------
UTIL::Value::Value(uint64_t p_value):
  m_valueType(UTIL::NO_VALUE), m_number(0), m_buffer(NULL)
//-----------------------------------------------------------------------------
{
  set(p_value);
}

//-----------------------------------------------------------------------------
UTIL::Value::Value(float p_value):
  m_valueType(UTIL::NO_VALUE), m_number(0), m_buffer(NULL)
//-----------------------------------------------------------------------------
{
  set(p_value);
}

//-----------------------------------------------------------------------------
UTIL::Value::Value(double p_value):
  m_valueType(UTIL::NO_VALUE), m_number(0), m_buffer(NULL)
//-----------------------------------------------------------------------------
{
  set(p_value);
}

//-----------------------------------------------------------------------------
UTIL::Value::Value(const char* p_value):
  m_valueType(UTIL::NO_VALUE), m_number(0), m_buffer(NULL)
//-----------------------------------------------------------------------------
{
  set(p_value);
}

//-----------------------------------------------------------------------------
UTIL::Value::Value(const std::string& p_value):
  m_valueType(UTIL::NO_VALUE), m_number(0), m_buffer(NULL)
//-----------------------------------------------------------------------------
{
  set(p_value);
}

//-----------------------------------------------------------------------------
UTIL::Value::Value(const uint8_t* p_buffer, size_t p_size):
  m_valueType(UTIL::NO_VALUE), m_number(0), m_buffer(NULL)
//-----------------------------------------------------------------------------
{
  set(p_buffer, p_size);
}

//-----------------------------------------------------------------------------
UTIL::Value::Value(const UTIL::AbsTime& p_value):
  m_valueType(UTIL::NO_VALUE), m_number(0), m_buffer(NULL)
//-----------------------------------------------------------------------------
{
  set(p_value);
}

//-----------------------------------------------------------------------------
UTIL::Value::Value(const UTIL::RelTime& p_value):
  m_valueType(UTIL::NO_VALUE), m_number(0), m_buffer(NULL)
//-----------------------------------------------------------------------------
{
  set(p_value);
}

//-----------------------------------------------------------------------------
const UTIL::Value::Value& operator=(const UTIL::Value& p_value)
//-----------------------------------------------------------------------------
{
  if(&p_value != this)
  {
    // delete the old contents
    set();
    // copy the new contents
    m_valueType = p_value.m_valueType;
    m_number = p_value.m_number;
    if(p_value.m_buffer != NULL)
    {
      m_buffer = new uint8_t[m_number];
      memcpy(m_buffer, p_value.m_buffer, m_number);
    }
  }
  return *this;
}

//-----------------------------------------------------------------------------
UTIL::Value::~Value()
//-----------------------------------------------------------------------------
{
  // delete contents
  set();
}

//-----------------------------------------------------------------------------
UTIL::ValueType UTIL::Value::getValueType() const
//-----------------------------------------------------------------------------
{
  return m_valueType;
}

//-----------------------------------------------------------------------------
void UTIL::Value::setValueType(UTIL::ValueType p_valueType)
//-----------------------------------------------------------------------------
{
  // delete contents
  set();
  // set value type
  m_valueType = p_valueType;
}

//-----------------------------------------------------------------------------
std::string UTIL::Value::dumpStr(const char* p_prefix) const
//-----------------------------------------------------------------------------
{
  if(p_prefix != NULL)
  {
    return p_prefix;
  }
  return "";
}

//-----------------------------------------------------------------------------
void UTIL::Value::dump(const char* p_prefix) const
//-----------------------------------------------------------------------------
{
  if(p_prefix != NULL)
  {
    cout << p_prefix << endl;
  }
  cout << endl;
}

//-----------------------------------------------------------------------------
void UTIL::Value::set()
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
void UTIL::Value::set(bool p_value)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
void UTIL::Value::set(int8_t p_value)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
void UTIL::Value::set(int16_t p_value)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
void UTIL::Value::set(int32_t p_value)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
void UTIL::Value::set(int64_t p_value)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
void UTIL::Value::set(uint8_t p_value)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
void UTIL::Value::set(uint16_t p_value)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
void UTIL::Value::set(uint32_t p_value)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
void UTIL::Value::set(uint64_t p_value)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
void UTIL::Value::set(float p_value)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
void UTIL::Value::set(double p_value)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
void UTIL::Value::set(const char* p_value)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
void UTIL::Value::set(const std::string& p_value)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
void UTIL::Value::set(const void* p_buffer, size_t p_size)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
void UTIL::Value::set(const UTIL::AbsTime& p_value)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
void UTIL::Value::set(const UTIL::RelTime& p_value)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
bool UTIL::Value::getBoolean() const throw(UTIL::Exception)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
int8_t UTIL::Value::getInt8() const throw(UTIL::Exception)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
int16_t UTIL::Value::getInt16() const throw(UTIL::Exception)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
int32_t UTIL::Value::getInt32() const throw(UTIL::Exception)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
int64_t UTIL::Value::getInt64() const throw(UTIL::Exception)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
uint8_t UTIL::Value::getUInt8() const throw(UTIL::Exception)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
uint16_t UTIL::Value::getUInt16() const throw(UTIL::Exception)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
uint32_t UTIL::Value::getUInt32() const throw(UTIL::Exception)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
uint64_t UTIL::Value::getUInt64() const throw(UTIL::Exception)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
float UTIL::Value::getFloat() const throw(UTIL::Exception)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
double UTIL::Value::getDouble() const throw(UTIL::Exception)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
std::string UTIL::Value::getAsciiString() const throw(UTIL::Exception)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
const uint8* UTIL::Value::getOctetString() const throw(UTIL::Exception)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
size_t UTIL::Value::getOctetStringLength() const throw(UTIL::Exception)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
UTIL::AbsTime UTIL::Value::getAbsTime() const throw(UTIL::Exception)
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
UTIL::RelTime UTIL::Value::getRelTime() const throw(UTIL::Exception)
//-----------------------------------------------------------------------------
{
}
